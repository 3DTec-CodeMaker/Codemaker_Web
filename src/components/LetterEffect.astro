---
const glitchColors = ["#5e4491", "#A476FF", "#241a38"];
const glitchSpeed = 33;
const centerVignette = false;
const outerVignette = false;
const smooth = true;

const glitchColorsSerialized = JSON.stringify(glitchColors);
---

<div class="relative w-full h-full bg-[#101010] overflow-hidden">
  <canvas id="letter-glitch-canvas" class="block w-full h-full"></canvas>

  {outerVignette && (
    <div class="absolute top-0 left-0 w-full h-full pointer-events-none bg-[radial-gradient(circle,_rgba(16,16,16,0)_60%,_rgba(16,16,16,1)_100%)]"></div>
  )}
  {centerVignette && (
    <div class="absolute top-0 left-0 w-full h-full pointer-events-none bg-[radial-gradient(circle,_rgba(0,0,0,0.8)_0%,_rgba(0,0,0,0)_60%)]"></div>
  )}

  <!-- Difuminado por los lados -->
  <div class="absolute top-0 left-0 w-full h-full pointer-events-none bg-[linear-gradient(to_right,_rgba(16,16,16,1)_0%,_rgba(16,16,16,0)_20%,_rgba(16,16,16,0)_80%,_rgba(16,16,16,1)_100%)]"></div>

  <script type="module" is:inline>
    const canvas = document.getElementById("letter-glitch-canvas");
    const context = canvas.getContext("2d");

    const glitchColors = ["#5e4491", "#A476FF", "#241a38"]; // Usar directamente el array
    const glitchSpeed = 33; // Usar directamente el valor
    const smooth = true; // Usar directamente el valor
    const fontSize = 16;
    const charWidth = 10;
    const charHeight = 20;

    const lettersAndSymbols = "ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$&*()-_+=/[]{};:<>,0123456789".split("");
    let grid = { columns: 0, rows: 0 };
    let letters = [];
    let animationFrame;
    let lastGlitchTime = Date.now();

    const getRandomChar = () => lettersAndSymbols[Math.floor(Math.random() * lettersAndSymbols.length)];
    const getRandomColor = () => glitchColors[Math.floor(Math.random() * glitchColors.length)];

    function hexToRgb(hex) {
      hex = hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, (_, r, g, b) => r + r + g + g + b + b);
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      } : null;
    }

    function interpolateColor(start, end, factor) {
      return `rgb(${Math.round(start.r + (end.r - start.r) * factor)},${Math.round(start.g + (end.g - start.g) * factor)},${Math.round(start.b + (end.b - start.b) * factor)})`;
    }

    function calculateGrid(width, height) {
      return {
        columns: Math.ceil(width / charWidth),
        rows: Math.ceil(height / charHeight)
      };
    }

    function initializeLetters(columns, rows) {
      grid = { columns, rows };
      letters = Array.from({ length: columns * rows }, () => ({
        char: getRandomChar(),
        color: getRandomColor(),
        targetColor: getRandomColor(),
        colorProgress: 1
      }));
    }

    function resizeCanvas() {
      const dpr = window.devicePixelRatio || 1;
      const rect = canvas.getBoundingClientRect(); // Cambiado de parentElement para mayor precisiÃ³n
      canvas.width = rect.width * dpr;
      canvas.height = rect.height * dpr;
      canvas.style.width = rect.width + "px";
      canvas.style.height = rect.height + "px";
      context.setTransform(dpr, 0, 0, dpr, 0, 0);
      const { columns, rows } = calculateGrid(rect.width, rect.height);
      initializeLetters(columns, rows);
      drawLetters();
    }

    function drawLetters() {
      const { width, height } = canvas.getBoundingClientRect();
      context.clearRect(0, 0, width, height);
      context.font = fontSize + "px monospace";
      context.textBaseline = "top";
      letters.forEach((letter, index) => {
        const x = (index % grid.columns) * charWidth;
        const y = Math.floor(index / grid.columns) * charHeight;
        context.fillStyle = letter.color;
        context.fillText(letter.char, x, y);
      });
    }

    function updateLetters() {
      const count = Math.max(1, Math.floor(letters.length * 0.05));
      for (let i = 0; i < count; i++) {
        const index = Math.floor(Math.random() * letters.length);
        letters[index].char = getRandomChar();
        letters[index].targetColor = getRandomColor();
        if (!smooth) {
          letters[index].color = letters[index].targetColor;
          letters[index].colorProgress = 1;
        } else {
          letters[index].colorProgress = 0;
        }
      }
    }

    function handleSmoothTransitions() {
      let needsRedraw = false;
      letters.forEach((letter) => {
        if (letter.colorProgress < 1) {
          letter.colorProgress += 0.05;
          if (letter.colorProgress > 1) letter.colorProgress = 1;
          const startRgb = hexToRgb(letter.color);
          const endRgb = hexToRgb(letter.targetColor);
          if (startRgb && endRgb) {
            letter.color = interpolateColor(startRgb, endRgb, letter.colorProgress);
            needsRedraw = true;
          }
        }
      });
      if (needsRedraw) drawLetters();
    }

    function animate() {
      const now = Date.now();
      if (now - lastGlitchTime >= glitchSpeed) {
        updateLetters();
        drawLetters();
        lastGlitchTime = now;
      }
      if (smooth) handleSmoothTransitions();
      animationFrame = requestAnimationFrame(animate);
    }

    window.addEventListener("resize", () => {
      cancelAnimationFrame(animationFrame);
      resizeCanvas();
      animate();
    });

    resizeCanvas();
    animate();
  </script>
</div>
